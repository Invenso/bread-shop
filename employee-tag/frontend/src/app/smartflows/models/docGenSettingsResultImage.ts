/**
 * XperiDo
 * This describes the REST api for one XperiDo project
 *
 * OpenAPI spec version: 4.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import {DocGenSettingsResultImagePageing} from './docGenSettingsResultImagePageing';


export interface DocGenSettingsResultImage {
	pageing?: DocGenSettingsResultImagePageing;
	format?: DocGenSettingsResultImage.FormatEnum;
	/**
	 * Whether or not to use anti-aliasing for rendering
	 */
	antiAliasing?: boolean;
	/**
	 * How colors are rendered. normal: render with unmodified colors. Grayscale: render with colors in a range of gray shades from white to black
	 */
	colorMode?: DocGenSettingsResultImage.ColorModeEnum;
	/**
	 * Specifies the output resolution for images in dpi
	 */
	resolution?: number;
	/**
	 * The background (paper) color for the generated images. When rendering pages of a document that specifies its own background color, then the document background color will override the color specified by this property
	 */
	paperColor?: string;
	/**
	 * The zoom factor for the generated images
	 */
	scale?: number;
	/**
	 * The quality of JPEG images. 0 means worst quality but maximum compression and 100 means best quality but minimum compression. If quality is 100, it means no compression
	 */
	jpegQuality?: number;
}

export namespace DocGenSettingsResultImage {
	export type FormatEnum = 'png' | 'jpeg' | 'svg' | 'bmp' | 'gif' | 'emf';
	export const FormatEnum = {
		Png: 'png' as FormatEnum,
		Jpeg: 'jpeg' as FormatEnum,
		Svg: 'svg' as FormatEnum,
		Bmp: 'bmp' as FormatEnum,
		Gif: 'gif' as FormatEnum,
		Emf: 'emf' as FormatEnum
	}
	export type ColorModeEnum = 'normal' | 'blackAndWhite' | 'grayscale';
	export const ColorModeEnum = {
		Normal: 'normal' as ColorModeEnum,
		BlackAndWhite: 'blackAndWhite' as ColorModeEnum,
		Grayscale: 'grayscale' as ColorModeEnum
	}
}
